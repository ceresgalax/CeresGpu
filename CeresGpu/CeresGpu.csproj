<Project Sdk="Microsoft.NET.Sdk">
    
    <PropertyGroup>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>

        <Nullable>enable</Nullable>
        <!-- Null-related warnings are errors -->
        <WarningsAsErrors>CS8603,CS8618,CS8600,CS8625,CS8604,CS8602,CS8634</WarningsAsErrors>
        <TargetFrameworks>net6.0;net8.0</TargetFrameworks>
        <LangVersion>10</LangVersion>
    </PropertyGroup>

    <PropertyGroup>
        <PrebuiltExternalToolsVersion>1.0.1</PrebuiltExternalToolsVersion>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="CeresGL" Version="0.1.2" />
        <PackageReference Include="JetBrains.Annotations" Version="2022.1.0" />
        <PackageReference Include="SkiaSharp" Version="2.88.6" />

        <!-- PrivateAssets="all" here to prevent the shader tools from ending up in the output directory of depending projects -->
        <!-- PrivateAssets="runtime" didn't seem to work :/ -->
        <PackageReference Include="CeresGpuPrebuiltExternalTools" Version="$(PrebuiltExternalToolsVersion)" PrivateAssets="all" /> 
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\..\CeresGLFW\CeresGLFW\CeresGLFW.csproj" />
    </ItemGroup>

    <ItemGroup>
        <Folder Include="MetalBinding" />
    </ItemGroup>

    <ItemGroup>
        <MetalBindingSrc Include="../metalbinding/**" Exclude="../metalbinding/build/**;../metalbinding/**/xcuserdata/**" />
    </ItemGroup>

    <Import Project="$(MSBuildProjectDirectory)\..\CeresGPU.targets" />

    <PropertyGroup>
        <HostRidOs Condition="$([MSBuild]::IsOSPlatform('OSX'))">osx</HostRidOs>
        <HostRidOs Condition="$([MSBuild]::IsOSPlatform('Windows'))">win</HostRidOs>
        <HostRidArch>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLower())</HostRidArch>
        <HostRid>$(HostRidOs)-$(HostRidArch)</HostRid>
    </PropertyGroup>
    
    <!-- Hack to support targeting multiple target frameworks https://github.com/dotnet/msbuild/issues/2781 -->

    <Target Name="MakeMetalBindingInner" Inputs="@(MetalBindingSrc);..\genmetal.py;..\makemetalbinding.py" Outputs="MetalBinding\Metal.Generated.cs;..\runtimes\osx-arm64\native\libmetalbinding.dylib;..\runtimes\osx-x64\native\libmetalbinding.dylib">
        <!-- Note: Even though Metal.Generated.cs is generated by this target, it is checked into source control in order for
          CeresGpu to be buildable outside of macOS. -->

        <FindPythonTask>
            <Output TaskParameter="PythonPath" PropertyName="Python" />
        </FindPythonTask>
        
        <Message Text="Running MakeMetalBinding @ $(MSBuildProjectDirectory)\.. @ $(MSBuildThisFileDirectory)" />
        <Exec WorkingDirectory="$(MSBuildThisFileDirectory)\.." Command="$(Python) makemetalbinding.py" />
    </Target>
    <Target Name="MakeMetalBinding" BeforeTargets="BeforeBuild;DispatchToInnerBuilds" Condition="$([MSBuild]::IsOSPlatform('OSX'))">
        <!--TargetFramework=once is critical here, as msbuild will not execute a task from same project with same properties twice. -->
        <MSBuild Projects="$(MSBuildProjectFile)" Targets="MakeMetalBindingInner" Properties="TargetFramework=once" />
    </Target>

    <ItemGroup>
        <Content Include="..\runtimes\osx-arm64\native\libmetalbinding.dylib">
            <PackagePath>runtimes/osx-arm64/native/libmetalbinding.dylib</PackagePath>
            <Pack>true</Pack>
            <CopyToOutputDirectory Condition="$([MSBuild]::IsOSPlatform('OSX'))">PreserveNewest</CopyToOutputDirectory>
            <CopyToOutputDirectory Condition="!$([MSBuild]::IsOSPlatform('OSX'))">Never</CopyToOutputDirectory>
            <Link>runtimes/osx-arm64/native/%(Filename)%(Extension)</Link>
        </Content>
        <Content Include="..\runtimes\osx-x64\native\libmetalbinding.dylib">
            <PackagePath>runtimes/osx-x64/native/libmetalbinding.dylib</PackagePath>
            <Pack>true</Pack>
            <CopyToOutputDirectory Condition="$([MSBuild]::IsOSPlatform('OSX'))">PreserveNewest</CopyToOutputDirectory>
            <CopyToOutputDirectory Condition="!$([MSBuild]::IsOSPlatform('OSX'))">Never</CopyToOutputDirectory>
            <Link>runtimes/osx-x64/native/%(Filename)%(Extension)</Link>
        </Content>
    </ItemGroup>
    
    <!--
    Targets to copy the binaries we need from the prebuilt binaries nuget package, renaming them if necesary. 
    -->
    <Target Name="ComputePrebuiltToolsToPrepare" BeforeTargets="PreparePrebuiltTools" Condition="'$(TargetFramework)' == 'once'">
        <ItemGroup>
            <_PrebuiltTool Include="$(NuGetPackageRoot)ceresgpuprebuiltexternaltools\$(PrebuiltExternalToolsVersion)\runtimes\$(HostRid)\native\*" />
            <!-- Create the real items now that we can access the metadata. -->
            <PrebuiltTool Include="@(_PrebuiltTool)">
                <OutputDir>$(BaseIntermediateOutputPath)staged_tools\</OutputDir>
                <OutputPath Condition="'$(HostRidOs)' != 'osx'">%(PrebuiltTool.OutputDir)%(Filename)%(Extension)</OutputPath>
                <!-- Strip off the .bin extension for osx. -->
                <OutputPath Condition="'$(HostRidOs)' == 'osx'">%(PrebuiltTool.OutputDir)%(Filename)</OutputPath>
            </PrebuiltTool>
        </ItemGroup>
    </Target>
    <Target Name="PreparePrebuiltTools"
            BeforeTargets="ggen"
            AfterTargets="BeforeBuild"
            Inputs="@(PrebuiltTool)"
            Outputs="@(PrebuiltTool -> '%(OutputPath)')"
    >
        <MakeDir Directories="@(PrebuiltTool -> '%(OutputDir)')" />
        <Copy
            SourceFiles="@(PrebuiltTool)"
            DestinationFiles="@(PrebuiltTool -> '%(OutputPath)')"
        />
        <ItemGroup>
            <FileWrites Include="@(PrebuiltTool -> '%(OutputPath)')" />
        </ItemGroup>
    </Target>
    
    <Target Name="DispatchPreparePrebuiltTools" AfterTargets="BeforeBuild" BeforeTargets="ggen">
        <!--TargetFramework=once is critical here, as msbuild will not execute a task from same project with same properties twice. -->
        <MSBuild Projects="$(MSBuildProjectFile)" Targets="PreparePrebuiltTools" Properties="TargetFramework=once" />
    </Target>

</Project>
