<Project Sdk="Microsoft.NET.Sdk">
    
    <PropertyGroup>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>

        <Nullable>enable</Nullable>
        <!-- Null-related warnings are errors -->
        <WarningsAsErrors>CS8603,CS8618,CS8600,CS8625,CS8604,CS8602,CS8634</WarningsAsErrors>
        <TargetFrameworks>net6.0;net8.0</TargetFrameworks>
        <LangVersion>10</LangVersion>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="CeresGL" Version="0.1.2" />
        <PackageReference Include="JetBrains.Annotations" Version="2022.1.0" />
        <PackageReference Include="SkiaSharp" Version="2.88.6" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\..\CeresGLFW\CeresGLFW\CeresGLFW.csproj" />
    </ItemGroup>

    <ItemGroup>
        <Folder Include="MetalBinding" />
    </ItemGroup>

    <ItemGroup>
        <MetalBindingSrc Include="../metalbinding/**" Exclude="../metalbinding/build/**;../metalbinding/**/xcuserdata/**" />
    </ItemGroup>

    <Import Project="$(MSBuildProjectDirectory)\..\CeresGPU.targets" />

    <!-- Hack to support targeting multiple target frameworks https://github.com/dotnet/msbuild/issues/2781 -->

    <Target Name="MakeMetalBindingInner" Inputs="@(MetalBindingSrc);..\genmetal.py;..\makemetalbinding.py" Outputs="MetalBinding\Metal.Generated.cs;..\runtimes\osx-arm64\native\libmetalbinding.dylib;..\runtimes\osx-x64\native\libmetalbinding.dylib">
        <!-- Note: Even though Metal.Generated.cs is generated by this target, it is checked into source control in order for
          CeresGpu to be buildable outside of macOS. -->

        <FindPythonTask>
            <Output TaskParameter="PythonPath" PropertyName="Python" />
        </FindPythonTask>
        
        <Message Text="Running MakeMetalBinding @ $(MSBuildProjectDirectory)\.. @ $(MSBuildThisFileDirectory)" />
        <Exec WorkingDirectory="$(MSBuildThisFileDirectory)\.." Command="$(Python) makemetalbinding.py" />
    </Target>
    <Target Name="MakeMetalBinding" BeforeTargets="BeforeBuild;DispatchToInnerBuilds" Condition="$([MSBuild]::IsOSPlatform('OSX'))">
        <!--TargetFramework=once is critical here, as msbuild will not execute a task from same project with same properties twice. -->
        <MSBuild Projects="$(MSBuildProjectFile)" Targets="MakeMetalBindingInner" Properties="TargetFramework=once" />
    </Target>

    <ItemGroup>
        <Content Include="..\runtimes\osx-arm64\native\libmetalbinding.dylib">
            <PackagePath>runtimes/osx-arm64/native/libmetalbinding.dylib</PackagePath>
            <Pack>true</Pack>
            <CopyToOutputDirectory Condition="$([MSBuild]::IsOSPlatform('OSX'))">PreserveNewest</CopyToOutputDirectory>
            <CopyToOutputDirectory Condition="!$([MSBuild]::IsOSPlatform('OSX'))">Never</CopyToOutputDirectory>
            <Link>runtimes/osx-arm64/native/%(Filename)%(Extension)</Link>
        </Content>
        <Content Include="..\runtimes\osx-x64\native\libmetalbinding.dylib">
            <PackagePath>runtimes/osx-x64/native/libmetalbinding.dylib</PackagePath>
            <Pack>true</Pack>
            <CopyToOutputDirectory Condition="$([MSBuild]::IsOSPlatform('OSX'))">PreserveNewest</CopyToOutputDirectory>
            <CopyToOutputDirectory Condition="!$([MSBuild]::IsOSPlatform('OSX'))">Never</CopyToOutputDirectory>
            <Link>runtimes/osx-x64/native/%(Filename)%(Extension)</Link>
        </Content>
    </ItemGroup>


    <!-- Build the spirv / glsl binaries needed by "ggen" - our shader compilation tool -->

    <ItemGroup Condition="$([MSBuild]::IsOSPlatform('Windows'))" >
        <BuildableRid Include="win-x64">
            <BuildOutputDir>$(Configuration)\</BuildOutputDir>
            <ExecutableExtension>.exe</ExecutableExtension>
        </BuildableRid>
    </ItemGroup>
    <ItemGroup Condition="$([MSBuild]::IsOSPlatform('OSX'))" >
        <BuildableRid Include="osx-x64;osx-arm64">
            <BuildOutputDir />
            <ExecutableExtension />
        </BuildableRid>
    </ItemGroup>

    <PropertyGroup>
        <GgenDepsExt>$(MSBuildThisFileDirectory)..\ggen\ext\</GgenDepsExt>
        <GlslangSourceDir>$(GgenDepsExt)glslang\</GlslangSourceDir>
    </PropertyGroup>

    <ItemGroup>
        <GlslangKnownGoodInput Include="$(GlslangSourceDir)*.json"/>
        <GlslangKnownGoodInput Include="$(GlslangSourceDir)update_glslang_sources.py"/>
<!--        <GlslangSrcFile Include="$(GlslangSourceDir)**\*" Exclude="$(GlslangSourceDir)External\**\*" />-->
    </ItemGroup>
    
    <Target Name="UpdateGlslangExternalSources"
            Inputs="@(GlslangKnownGoodInput)"
            Outputs="$(IntermediateOutputPath)\glslang\update_sources.receipt"
            BeforeTargets="MakeGlslangSingular"
    >
        <FindPythonTask>
            <Output TaskParameter="PythonPath" PropertyName="Python" />
        </FindPythonTask>
        <Exec WorkingDirectory="$(GlslangSourceDir)" Command="$(Python) update_glslang_sources.py" />

        <MakeDir Directories="$(IntermediateOutputPath)\glslang" />
        <Touch Files="$(IntermediateOutputPath)\glslang\update_source.receipt" AlwaysCreate="true"/>
        
        <ItemGroup>
            <!-- Now that we have all the sources files in place, we can determine the source file items. -->
            <GlslangSrcFile Include="$(GlslangSourceDir)**\*" />
        </ItemGroup>
    </Target>
    
    <Target Name="MakeGlslangSingular"
            Inputs="@(GlslangSrcFile)"
            Outputs="$(MSBuildThisFileDirectory)..\ggen\binaries\%(BuildableRid.Identity)\glslangValidator%(BuildableRid.ExecutableExtension)"
    >
        <PropertyGroup>
            <ThisRid>%(BuildableRid.Identity)</ThisRid>
            <BuildDir>$(IntermediateOutputPath)glslang\%(BuildableRid.Identity)\</BuildDir>
            <BuildOutputDir>$(IntermediateOutputPath)glslang\%(BuildableRid.Identity)\StandAlone\%(BuildableRid.BuildOutputDir)</BuildOutputDir>
        </PropertyGroup>

        <PropertyGroup>
            <CmakeOsxArchitectures />
            <CmakeOsxArchitectures Condition="'%(BuildableRid.Identity)' == 'osx-x64'">x86_64</CmakeOsxArchitectures>
            <CmakeOsxArchitectures Condition="'%(BuildableRid.Identity)' == 'osx-arm64'">arm64</CmakeOsxArchitectures>
        </PropertyGroup>

        
        <MakeDir Directories="$(BuildDir)" />
        <Exec WorkingDirectory="$(BuildDir)" Command="cmake &quot;$(GlslangSourceDir.TrimEnd('\'))&quot; &quot;-DCMAKE_OSX_ARCHITECTURES=$(CmakeOsxArchitectures)&quot;" />
        <Exec WorkingDirectory="$(BuildDir)" Command="cmake --build . --config $(Configuration) -j" />

        <MakeDir Directories="$(MSBuildThisFileDirectory)..\ggen\binaries\%(BuildableRid.Identity)" />
        <Copy 
                SourceFiles="$(BuildOutputDir)glslangValidator%(BuildableRid.ExecutableExtension)" 
                DestinationFiles="$(MSBuildThisFileDirectory)..\ggen\binaries\%(BuildableRid.Identity)\glslangValidator%(BuildableRid.ExecutableExtension)" 
        />

        <ItemGroup>
            <FileWrites Include="$(BuildDir)\**\*" />
        </ItemGroup>

    </Target>

<!--    <Target Name="MakeSpirvCrossSingular"-->
<!--            Inputs="@(MetalBindingSrc);..\genmetal.py;..\makemetalbinding.py"-->
<!--            Outputs="MetalBinding\Metal.Generated.cs;..\runtimes\osx-arm64\native\libmetalbinding.dylib;..\runtimes\osx-x64\native\libmetalbinding.dylib"-->
<!--    >-->



<!--    </Target>-->


    <Target Name="MakeGgenTools" BeforeTargets="BeforeBuild;DispatchToInnerBuilds">
        <!--TargetFramework=once is critical here, as msbuild will not execute a task from same project with same properties twice. -->
        <MSBuild Projects="$(MSBuildProjectFile)" Targets="MakeGlslangSingular" Properties="TargetFramework=once" />
<!--        <MSBuild Projects="$(MSBuildProjectFile)" Targets="MakeSpirvCrossSingular" Properties="TargetFramework=once" />-->
    </Target>




</Project>
