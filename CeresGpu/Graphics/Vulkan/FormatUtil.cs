using System;
using Silk.NET.Vulkan;

namespace CeresGpu.Graphics.Vulkan;

public static class FormatUtil
{
    public static Format ToVkFormat(this ColorFormat format)
    {
        return format switch {
            ColorFormat.R4G4B4A4_UNORM_PACK16 => Format.R4G4B4A4UnormPack16,
            ColorFormat.B4G4R4A4_UNORM_PACK16 => Format.B4G4R4A4UnormPack16,
            ColorFormat.R5G6B5_UNORM_PACK16 => Format.R5G6B5UnormPack16,
            ColorFormat.B5G6R5_UNORM_PACK16 => Format.B5G6R5UnormPack16,
            ColorFormat.R5G5B5A1_UNORM_PACK16 => Format.R5G5B5A1UnormPack16,
            ColorFormat.B5G5R5A1_UNORM_PACK16 => Format.B5G5R5A1UnormPack16,
            ColorFormat.A1R5G5B5_UNORM_PACK16 => Format.A1R5G5B5UnormPack16,
            ColorFormat.R8_UNORM => Format.R8Unorm,
            ColorFormat.R8_SNORM => Format.R8SNorm,
            ColorFormat.R8_USCALED => Format.R8Uscaled,
            ColorFormat.R8_SSCALED => Format.R8Sscaled,
            ColorFormat.R8_UINT => Format.R8Uint,
            ColorFormat.R8_SINT => Format.R8Sint,
            ColorFormat.R8_SRGB => Format.R8Srgb,
            ColorFormat.R8G8_UNORM => Format.R8G8Unorm,
            ColorFormat.R8G8_SNORM => Format.R8G8SNorm,
            ColorFormat.R8G8_USCALED => Format.R8G8Uscaled,
            ColorFormat.R8G8_SSCALED => Format.R8G8Sscaled,
            ColorFormat.R8G8_UINT => Format.R8G8Uint,
            ColorFormat.R8G8_SINT => Format.R8G8Sint,
            ColorFormat.R8G8_SRGB => Format.R8G8Srgb,
            ColorFormat.R8G8B8A8_UNORM => Format.R8G8B8A8Unorm,
            ColorFormat.R8G8B8A8_SNORM => Format.R8G8B8A8SNorm,
            ColorFormat.R8G8B8A8_USCALED => Format.R8G8B8A8Uscaled,
            ColorFormat.R8G8B8A8_SSCALED => Format.R8G8B8A8Sscaled,
            ColorFormat.R8G8B8A8_UINT => Format.R8G8B8A8Uint,
            ColorFormat.R8G8B8A8_SINT => Format.R8G8B8A8Sint,
            ColorFormat.R8G8B8A8_SRGB => Format.R8G8B8A8Srgb,
            ColorFormat.B8G8R8A8_UNORM => Format.B8G8R8A8Unorm,
            ColorFormat.B8G8R8A8_SNORM => Format.B8G8R8A8SNorm,
            ColorFormat.B8G8R8A8_USCALED => Format.B8G8R8A8Uscaled,
            ColorFormat.B8G8R8A8_SSCALED => Format.B8G8R8A8Sscaled,
            ColorFormat.B8G8R8A8_UINT => Format.B8G8R8A8Uint,
            ColorFormat.B8G8R8A8_SINT => Format.B8G8R8A8Sint,
            ColorFormat.B8G8R8A8_SRGB => Format.B8G8R8A8Srgb,
            ColorFormat.A8B8G8R8_UNORM_PACK32 => Format.A8B8G8R8UnormPack32,
            ColorFormat.A8B8G8R8_SNORM_PACK32 => Format.A8B8G8R8SNormPack32,
            ColorFormat.A8B8G8R8_USCALED_PACK32 => Format.A8B8G8R8UscaledPack32,
            ColorFormat.A8B8G8R8_SSCALED_PACK32 => Format.A8B8G8R8SscaledPack32,
            ColorFormat.A8B8G8R8_UINT_PACK32 => Format.A8B8G8R8UintPack32,
            ColorFormat.A8B8G8R8_SINT_PACK32 => Format.A8B8G8R8SintPack32,
            ColorFormat.A8B8G8R8_SRGB_PACK32 => Format.A8B8G8R8SrgbPack32,
            ColorFormat.A2R10G10B10_UNORM_PACK32 => Format.A2R10G10B10UnormPack32,
            ColorFormat.A2R10G10B10_SNORM_PACK32 => Format.A2R10G10B10SNormPack32,
            ColorFormat.A2R10G10B10_USCALED_PACK32 => Format.A2R10G10B10UscaledPack32,
            ColorFormat.A2R10G10B10_SSCALED_PACK32 => Format.A2R10G10B10SscaledPack32,
            ColorFormat.A2R10G10B10_UINT_PACK32 => Format.A2R10G10B10UintPack32,
            ColorFormat.A2R10G10B10_SINT_PACK32 => Format.A2R10G10B10SintPack32,
            ColorFormat.A2B10G10R10_UNORM_PACK32 => Format.A2B10G10R10UnormPack32,
            ColorFormat.A2B10G10R10_SNORM_PACK32 => Format.A2B10G10R10SNormPack32,
            ColorFormat.A2B10G10R10_USCALED_PACK32 => Format.A2B10G10R10UscaledPack32,
            ColorFormat.A2B10G10R10_SSCALED_PACK32 => Format.A2B10G10R10SscaledPack32,
            ColorFormat.A2B10G10R10_UINT_PACK32 => Format.A2B10G10R10UintPack32,
            ColorFormat.A2B10G10R10_SINT_PACK32 => Format.A2B10G10R10SintPack32,
            ColorFormat.R16_UNORM => Format.R16Unorm,
            ColorFormat.R16_SNORM => Format.R16SNorm,
            ColorFormat.R16_USCALED => Format.R16Uscaled,
            ColorFormat.R16_SSCALED => Format.R16Sscaled,
            ColorFormat.R16_UINT => Format.R16Uint,
            ColorFormat.R16_SINT => Format.R16Sint,
            ColorFormat.R16_SFLOAT => Format.R16Sfloat,
            ColorFormat.R16G16_UNORM => Format.R16G16Unorm,
            ColorFormat.R16G16_SNORM => Format.R16G16SNorm,
            ColorFormat.R16G16_USCALED => Format.R16G16Uscaled,
            ColorFormat.R16G16_SSCALED => Format.R16G16Sscaled,
            ColorFormat.R16G16_UINT => Format.R16G16Uint,
            ColorFormat.R16G16_SINT => Format.R16G16Sint,
            ColorFormat.R16G16_SFLOAT => Format.R16G16Sfloat,
            ColorFormat.R16G16B16_UNORM => Format.R16G16B16Unorm,
            ColorFormat.R16G16B16_SNORM => Format.R16G16B16SNorm,
            ColorFormat.R16G16B16_USCALED => Format.R16G16B16Uscaled,
            ColorFormat.R16G16B16_SSCALED => Format.R16G16B16Sscaled,
            ColorFormat.R16G16B16_UINT => Format.R16G16B16Uint,
            ColorFormat.R16G16B16_SINT => Format.R16G16B16Sint,
            ColorFormat.R16G16B16_SFLOAT => Format.R16G16B16Sfloat,
            ColorFormat.R16G16B16A16_UNORM => Format.R16G16B16A16Unorm,
            ColorFormat.R16G16B16A16_SNORM => Format.R16G16B16A16SNorm,
            ColorFormat.R16G16B16A16_USCALED => Format.R16G16B16A16Uscaled,
            ColorFormat.R16G16B16A16_SSCALED => Format.R16G16B16A16Sscaled,
            ColorFormat.R16G16B16A16_UINT => Format.R16G16B16A16Uint,
            ColorFormat.R16G16B16A16_SINT => Format.R16G16B16A16Sint,
            ColorFormat.R16G16B16A16_SFLOAT => Format.R16G16B16A16Sfloat,
            ColorFormat.R32_UINT => Format.R32Uint,
            ColorFormat.R32_SINT => Format.R32Sint,
            ColorFormat.R32_SFLOAT => Format.R32Sfloat,
            ColorFormat.R32G32_UINT => Format.R32G32Uint,
            ColorFormat.R32G32_SINT => Format.R32G32Sint,
            ColorFormat.R32G32_SFLOAT => Format.R32G32Sfloat,
            ColorFormat.R32G32B32_UINT => Format.R32G32B32Uint,
            ColorFormat.R32G32B32_SINT => Format.R32G32B32Sint,
            ColorFormat.R32G32B32_SFLOAT => Format.R32G32B32Sfloat,
            ColorFormat.R32G32B32A32_UINT => Format.R32G32B32A32Uint,
            ColorFormat.R32G32B32A32_SINT => Format.R32G32B32A32Sint,
            ColorFormat.R32G32B32A32_SFLOAT => Format.R32G32B32A32Sfloat,
            ColorFormat.R64_UINT => Format.R64Uint,
            ColorFormat.R64_SINT => Format.R64Sint,
            ColorFormat.R64_SFLOAT => Format.R64Sfloat,
            ColorFormat.R64G64_UINT => Format.R64G64Uint,
            ColorFormat.R64G64_SINT => Format.R64G64Sint,
            ColorFormat.R64G64_SFLOAT => Format.R64G64Sfloat,
            ColorFormat.R64G64B64_UINT => Format.R64G64B64Uint,
            ColorFormat.R64G64B64_SINT => Format.R64G64B64Sint,
            ColorFormat.R64G64B64_SFLOAT => Format.R64G64B64Sfloat,
            ColorFormat.R64G64B64A64_UINT => Format.R64G64B64A64Uint,
            ColorFormat.R64G64B64A64_SINT => Format.R64G64B64A64Sint,
            ColorFormat.R64G64B64A64_SFLOAT => Format.R64G64B64A64Sfloat,
            ColorFormat.B10G11R11_UFLOAT_PACK32 => Format.B10G11R11UfloatPack32,
            _ => throw new ArgumentOutOfRangeException(nameof(format), format, null)
        };
    }

    public static Format ToVkFormat(this DepthStencilFormat format)
    {
        return format switch {
            DepthStencilFormat.D16_UNORM => Format.D16Unorm,
            DepthStencilFormat.X8D24_UNORM_PACK32 => Format.X8D24UnormPack32,
            DepthStencilFormat.D32_SFLOAT => Format.D32Sfloat,
            DepthStencilFormat.S8_UINT => Format.S8Uint,
            DepthStencilFormat.D16_UNORM_S8_UINT => Format.D16UnormS8Uint,
            DepthStencilFormat.D24_UNORM_S8_UINT => Format.D24UnormS8Uint,
            DepthStencilFormat.D32_SFLOAT_S8_UINT => Format.D32SfloatS8Uint,
            _ => throw new ArgumentOutOfRangeException(nameof(format), format, null)
        };
    }

    public static bool ToColorFormat(this Format format, out ColorFormat colorFormat)
    {
        colorFormat = format switch {
            Format.Undefined => throw new NotImplementedException(),
            Format.R4G4UnormPack8 => throw new NotImplementedException(),
            Format.R4G4B4A4UnormPack16 => throw new NotImplementedException(),
            Format.B4G4R4A4UnormPack16 => throw new NotImplementedException(),
            Format.R5G6B5UnormPack16 => throw new NotImplementedException(),
            Format.B5G6R5UnormPack16 => throw new NotImplementedException(),
            Format.R5G5B5A1UnormPack16 => throw new NotImplementedException(),
            Format.B5G5R5A1UnormPack16 => throw new NotImplementedException(),
            Format.A1R5G5B5UnormPack16 => throw new NotImplementedException(),
            Format.R8Unorm => throw new NotImplementedException(),
            Format.R8SNorm => throw new NotImplementedException(),
            Format.R8Uscaled => throw new NotImplementedException(),
            Format.R8Sscaled => throw new NotImplementedException(),
            Format.R8Uint => throw new NotImplementedException(),
            Format.R8Sint => throw new NotImplementedException(),
            Format.R8Srgb => throw new NotImplementedException(),
            Format.R8G8Unorm => throw new NotImplementedException(),
            Format.R8G8SNorm => throw new NotImplementedException(),
            Format.R8G8Uscaled => throw new NotImplementedException(),
            Format.R8G8Sscaled => throw new NotImplementedException(),
            Format.R8G8Uint => throw new NotImplementedException(),
            Format.R8G8Sint => throw new NotImplementedException(),
            Format.R8G8Srgb => throw new NotImplementedException(),
            Format.R8G8B8Unorm => throw new NotImplementedException(),
            Format.R8G8B8SNorm => throw new NotImplementedException(),
            Format.R8G8B8Uscaled => throw new NotImplementedException(),
            Format.R8G8B8Sscaled => throw new NotImplementedException(),
            Format.R8G8B8Uint => throw new NotImplementedException(),
            Format.R8G8B8Sint => throw new NotImplementedException(),
            Format.R8G8B8Srgb => throw new NotImplementedException(),
            Format.B8G8R8Unorm => throw new NotImplementedException(),
            Format.B8G8R8SNorm => throw new NotImplementedException(),
            Format.B8G8R8Uscaled => throw new NotImplementedException(),
            Format.B8G8R8Sscaled => throw new NotImplementedException(),
            Format.B8G8R8Uint => throw new NotImplementedException(),
            Format.B8G8R8Sint => throw new NotImplementedException(),
            Format.B8G8R8Srgb => throw new NotImplementedException(),
            Format.R8G8B8A8Unorm => throw new NotImplementedException(),
            Format.R8G8B8A8SNorm => throw new NotImplementedException(),
            Format.R8G8B8A8Uscaled => throw new NotImplementedException(),
            Format.R8G8B8A8Sscaled => throw new NotImplementedException(),
            Format.R8G8B8A8Uint => throw new NotImplementedException(),
            Format.R8G8B8A8Sint => throw new NotImplementedException(),
            Format.R8G8B8A8Srgb => ColorFormat.R8G8B8A8_SRGB,
            Format.B8G8R8A8Unorm => throw new NotImplementedException(),
            Format.B8G8R8A8SNorm => throw new NotImplementedException(),
            Format.B8G8R8A8Uscaled => throw new NotImplementedException(),
            Format.B8G8R8A8Sscaled => throw new NotImplementedException(),
            Format.B8G8R8A8Uint => throw new NotImplementedException(),
            Format.B8G8R8A8Sint => throw new NotImplementedException(),
            Format.B8G8R8A8Srgb => throw new NotImplementedException(),
            Format.A8B8G8R8UnormPack32 => throw new NotImplementedException(),
            Format.A8B8G8R8SNormPack32 => throw new NotImplementedException(),
            Format.A8B8G8R8UscaledPack32 => throw new NotImplementedException(),
            Format.A8B8G8R8SscaledPack32 => throw new NotImplementedException(),
            Format.A8B8G8R8UintPack32 => throw new NotImplementedException(),
            Format.A8B8G8R8SintPack32 => throw new NotImplementedException(),
            Format.A8B8G8R8SrgbPack32 => throw new NotImplementedException(),
            Format.A2R10G10B10UnormPack32 => throw new NotImplementedException(),
            Format.A2R10G10B10SNormPack32 => throw new NotImplementedException(),
            Format.A2R10G10B10UscaledPack32 => throw new NotImplementedException(),
            Format.A2R10G10B10SscaledPack32 => throw new NotImplementedException(),
            Format.A2R10G10B10UintPack32 => throw new NotImplementedException(),
            Format.A2R10G10B10SintPack32 => throw new NotImplementedException(),
            Format.A2B10G10R10UnormPack32 => throw new NotImplementedException(),
            Format.A2B10G10R10SNormPack32 => throw new NotImplementedException(),
            Format.A2B10G10R10UscaledPack32 => throw new NotImplementedException(),
            Format.A2B10G10R10SscaledPack32 => throw new NotImplementedException(),
            Format.A2B10G10R10UintPack32 => throw new NotImplementedException(),
            Format.A2B10G10R10SintPack32 => throw new NotImplementedException(),
            Format.R16Unorm => throw new NotImplementedException(),
            Format.R16SNorm => throw new NotImplementedException(),
            Format.R16Uscaled => throw new NotImplementedException(),
            Format.R16Sscaled => throw new NotImplementedException(),
            Format.R16Uint => throw new NotImplementedException(),
            Format.R16Sint => throw new NotImplementedException(),
            Format.R16Sfloat => throw new NotImplementedException(),
            Format.R16G16Unorm => throw new NotImplementedException(),
            Format.R16G16SNorm => throw new NotImplementedException(),
            Format.R16G16Uscaled => throw new NotImplementedException(),
            Format.R16G16Sscaled => throw new NotImplementedException(),
            Format.R16G16Uint => throw new NotImplementedException(),
            Format.R16G16Sint => throw new NotImplementedException(),
            Format.R16G16Sfloat => throw new NotImplementedException(),
            Format.R16G16B16Unorm => throw new NotImplementedException(),
            Format.R16G16B16SNorm => throw new NotImplementedException(),
            Format.R16G16B16Uscaled => throw new NotImplementedException(),
            Format.R16G16B16Sscaled => throw new NotImplementedException(),
            Format.R16G16B16Uint => throw new NotImplementedException(),
            Format.R16G16B16Sint => throw new NotImplementedException(),
            Format.R16G16B16Sfloat => throw new NotImplementedException(),
            Format.R16G16B16A16Unorm => throw new NotImplementedException(),
            Format.R16G16B16A16SNorm => throw new NotImplementedException(),
            Format.R16G16B16A16Uscaled => throw new NotImplementedException(),
            Format.R16G16B16A16Sscaled => throw new NotImplementedException(),
            Format.R16G16B16A16Uint => throw new NotImplementedException(),
            Format.R16G16B16A16Sint => throw new NotImplementedException(),
            Format.R16G16B16A16Sfloat => throw new NotImplementedException(),
            Format.R32Uint => throw new NotImplementedException(),
            Format.R32Sint => throw new NotImplementedException(),
            Format.R32Sfloat => throw new NotImplementedException(),
            Format.R32G32Uint => throw new NotImplementedException(),
            Format.R32G32Sint => throw new NotImplementedException(),
            Format.R32G32Sfloat => throw new NotImplementedException(),
            Format.R32G32B32Uint => throw new NotImplementedException(),
            Format.R32G32B32Sint => throw new NotImplementedException(),
            Format.R32G32B32Sfloat => throw new NotImplementedException(),
            Format.R32G32B32A32Uint => throw new NotImplementedException(),
            Format.R32G32B32A32Sint => throw new NotImplementedException(),
            Format.R32G32B32A32Sfloat => throw new NotImplementedException(),
            Format.R64Uint => throw new NotImplementedException(),
            Format.R64Sint => throw new NotImplementedException(),
            Format.R64Sfloat => throw new NotImplementedException(),
            Format.R64G64Uint => throw new NotImplementedException(),
            Format.R64G64Sint => throw new NotImplementedException(),
            Format.R64G64Sfloat => throw new NotImplementedException(),
            Format.R64G64B64Uint => throw new NotImplementedException(),
            Format.R64G64B64Sint => throw new NotImplementedException(),
            Format.R64G64B64Sfloat => throw new NotImplementedException(),
            Format.R64G64B64A64Uint => throw new NotImplementedException(),
            Format.R64G64B64A64Sint => throw new NotImplementedException(),
            Format.R64G64B64A64Sfloat => throw new NotImplementedException(),
            Format.B10G11R11UfloatPack32 => throw new NotImplementedException(),
            Format.E5B9G9R9UfloatPack32 => throw new NotImplementedException(),
            Format.D16Unorm => throw new NotImplementedException(),
            Format.X8D24UnormPack32 => throw new NotImplementedException(),
            Format.D32Sfloat => throw new NotImplementedException(),
            Format.S8Uint => throw new NotImplementedException(),
            Format.D16UnormS8Uint => throw new NotImplementedException(),
            Format.D24UnormS8Uint => throw new NotImplementedException(),
            Format.D32SfloatS8Uint => throw new NotImplementedException(),
            Format.BC1RgbUnormBlock => throw new NotImplementedException(),
            Format.BC1RgbSrgbBlock => throw new NotImplementedException(),
            Format.BC1RgbaUnormBlock => throw new NotImplementedException(),
            Format.BC1RgbaSrgbBlock => throw new NotImplementedException(),
            Format.BC2UnormBlock => throw new NotImplementedException(),
            Format.BC2SrgbBlock => throw new NotImplementedException(),
            Format.BC3UnormBlock => throw new NotImplementedException(),
            Format.BC3SrgbBlock => throw new NotImplementedException(),
            Format.BC4UnormBlock => throw new NotImplementedException(),
            Format.BC4SNormBlock => throw new NotImplementedException(),
            Format.BC5UnormBlock => throw new NotImplementedException(),
            Format.BC5SNormBlock => throw new NotImplementedException(),
            Format.BC6HUfloatBlock => throw new NotImplementedException(),
            Format.BC6HSfloatBlock => throw new NotImplementedException(),
            Format.BC7UnormBlock => throw new NotImplementedException(),
            Format.BC7SrgbBlock => throw new NotImplementedException(),
            Format.Etc2R8G8B8UnormBlock => throw new NotImplementedException(),
            Format.Etc2R8G8B8SrgbBlock => throw new NotImplementedException(),
            Format.Etc2R8G8B8A1UnormBlock => throw new NotImplementedException(),
            Format.Etc2R8G8B8A1SrgbBlock => throw new NotImplementedException(),
            Format.Etc2R8G8B8A8UnormBlock => throw new NotImplementedException(),
            Format.Etc2R8G8B8A8SrgbBlock => throw new NotImplementedException(),
            Format.EacR11UnormBlock => throw new NotImplementedException(),
            Format.EacR11SNormBlock => throw new NotImplementedException(),
            Format.EacR11G11UnormBlock => throw new NotImplementedException(),
            Format.EacR11G11SNormBlock => throw new NotImplementedException(),
            Format.Astc4x4UnormBlock => throw new NotImplementedException(),
            Format.Astc4x4SrgbBlock => throw new NotImplementedException(),
            Format.Astc5x4UnormBlock => throw new NotImplementedException(),
            Format.Astc5x4SrgbBlock => throw new NotImplementedException(),
            Format.Astc5x5UnormBlock => throw new NotImplementedException(),
            Format.Astc5x5SrgbBlock => throw new NotImplementedException(),
            Format.Astc6x5UnormBlock => throw new NotImplementedException(),
            Format.Astc6x5SrgbBlock => throw new NotImplementedException(),
            Format.Astc6x6UnormBlock => throw new NotImplementedException(),
            Format.Astc6x6SrgbBlock => throw new NotImplementedException(),
            Format.Astc8x5UnormBlock => throw new NotImplementedException(),
            Format.Astc8x5SrgbBlock => throw new NotImplementedException(),
            Format.Astc8x6UnormBlock => throw new NotImplementedException(),
            Format.Astc8x6SrgbBlock => throw new NotImplementedException(),
            Format.Astc8x8UnormBlock => throw new NotImplementedException(),
            Format.Astc8x8SrgbBlock => throw new NotImplementedException(),
            Format.Astc10x5UnormBlock => throw new NotImplementedException(),
            Format.Astc10x5SrgbBlock => throw new NotImplementedException(),
            Format.Astc10x6UnormBlock => throw new NotImplementedException(),
            Format.Astc10x6SrgbBlock => throw new NotImplementedException(),
            Format.Astc10x8UnormBlock => throw new NotImplementedException(),
            Format.Astc10x8SrgbBlock => throw new NotImplementedException(),
            Format.Astc10x10UnormBlock => throw new NotImplementedException(),
            Format.Astc10x10SrgbBlock => throw new NotImplementedException(),
            Format.Astc12x10UnormBlock => throw new NotImplementedException(),
            Format.Astc12x10SrgbBlock => throw new NotImplementedException(),
            Format.Astc12x12UnormBlock => throw new NotImplementedException(),
            Format.Astc12x12SrgbBlock => throw new NotImplementedException(),
            Format.Pvrtc12BppUnormBlockImg => throw new NotImplementedException(),
            Format.Pvrtc14BppUnormBlockImg => throw new NotImplementedException(),
            Format.Pvrtc22BppUnormBlockImg => throw new NotImplementedException(),
            Format.Pvrtc24BppUnormBlockImg => throw new NotImplementedException(),
            Format.Pvrtc12BppSrgbBlockImg => throw new NotImplementedException(),
            Format.Pvrtc14BppSrgbBlockImg => throw new NotImplementedException(),
            Format.Pvrtc22BppSrgbBlockImg => throw new NotImplementedException(),
            Format.Pvrtc24BppSrgbBlockImg => throw new NotImplementedException(),
            Format.Astc4x4SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc5x4SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc5x5SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc6x5SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc6x6SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc8x5SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc8x6SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc8x8SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc10x5SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc10x6SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc10x8SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc10x10SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc12x10SfloatBlockExt => throw new NotImplementedException(),
            Format.Astc12x12SfloatBlockExt => throw new NotImplementedException(),
            Format.G8B8G8R8422UnormKhr => throw new NotImplementedException(),
            Format.B8G8R8G8422UnormKhr => throw new NotImplementedException(),
            Format.G8B8R83Plane420UnormKhr => throw new NotImplementedException(),
            Format.G8B8R82Plane420UnormKhr => throw new NotImplementedException(),
            Format.G8B8R83Plane422UnormKhr => throw new NotImplementedException(),
            Format.G8B8R82Plane422UnormKhr => throw new NotImplementedException(),
            Format.G8B8R83Plane444UnormKhr => throw new NotImplementedException(),
            Format.R10X6UnormPack16Khr => throw new NotImplementedException(),
            Format.R10X6G10X6Unorm2Pack16Khr => throw new NotImplementedException(),
            Format.R10X6G10X6B10X6A10X6Unorm4Pack16Khr => throw new NotImplementedException(),
            Format.G10X6B10X6G10X6R10X6422Unorm4Pack16Khr => throw new NotImplementedException(),
            Format.B10X6G10X6R10X6G10X6422Unorm4Pack16Khr => throw new NotImplementedException(),
            Format.G10X6B10X6R10X63Plane420Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G10X6B10X6R10X62Plane420Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G10X6B10X6R10X63Plane422Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G10X6B10X6R10X62Plane422Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G10X6B10X6R10X63Plane444Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.R12X4UnormPack16Khr => throw new NotImplementedException(),
            Format.R12X4G12X4Unorm2Pack16Khr => throw new NotImplementedException(),
            Format.R12X4G12X4B12X4A12X4Unorm4Pack16Khr => throw new NotImplementedException(),
            Format.G12X4B12X4G12X4R12X4422Unorm4Pack16Khr => throw new NotImplementedException(),
            Format.B12X4G12X4R12X4G12X4422Unorm4Pack16Khr => throw new NotImplementedException(),
            Format.G12X4B12X4R12X43Plane420Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G12X4B12X4R12X42Plane420Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G12X4B12X4R12X43Plane422Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G12X4B12X4R12X42Plane422Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G12X4B12X4R12X43Plane444Unorm3Pack16Khr => throw new NotImplementedException(),
            Format.G16B16G16R16422UnormKhr => throw new NotImplementedException(),
            Format.B16G16R16G16422UnormKhr => throw new NotImplementedException(),
            Format.G16B16R163Plane420UnormKhr => throw new NotImplementedException(),
            Format.G16B16R162Plane420UnormKhr => throw new NotImplementedException(),
            Format.G16B16R163Plane422UnormKhr => throw new NotImplementedException(),
            Format.G16B16R162Plane422UnormKhr => throw new NotImplementedException(),
            Format.G16B16R163Plane444UnormKhr => throw new NotImplementedException(),
            Format.G8B8R82Plane444UnormExt => throw new NotImplementedException(),
            Format.G10X6B10X6R10X62Plane444Unorm3Pack16Ext => throw new NotImplementedException(),
            Format.G12X4B12X4R12X42Plane444Unorm3Pack16Ext => throw new NotImplementedException(),
            Format.G16B16R162Plane444UnormExt => throw new NotImplementedException(),
            Format.A4R4G4B4UnormPack16Ext => throw new NotImplementedException(),
            Format.A4B4G4R4UnormPack16Ext => throw new NotImplementedException(),
            Format.R16G16Sfixed5NV => throw new NotImplementedException(),
            Format.A1B5G5R5UnormPack16Khr => throw new NotImplementedException(),
            Format.A8UnormKhr => throw new NotImplementedException(),
            _ => throw new ArgumentOutOfRangeException(nameof(format), format, null)
        };
        return true;
    }
}