<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <Import Project="$(MSBuildThisFileDirectory)FindPythonTask.targets" />
    
<!--    &lt;!&ndash; From: https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-roslyncodetaskfactory &ndash;&gt;-->
<!--    <UsingTask TaskName="FindPythonTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">-->
<!--        <Task>-->
<!--            <Code Type="Class" Language="cs">-->
<!--                <![CDATA[-->
<!--#nullable enable-->
<!--using System;-->
<!--using System.Diagnostics;-->
<!--using Microsoft.Build.Framework;-->
<!--using Microsoft.Build.Utilities;-->
<!--using Task = Microsoft.Build.Utilities.Task;-->

<!--public class FindPythonTask : Task-->
<!--{-->
<!--    [Output]-->
<!--    public string PythonPath { get; set; } = "";-->

<!--    private static string? CachedPythonPath;-->
<!--    -->
<!--    public override bool Execute()-->
<!--    {-->
<!--        if (CachedPythonPath != null) {-->
<!--            PythonPath = CachedPythonPath;-->
<!--            return true;-->
<!--        }-->

<!--        string[] pythons = { -->
<!--            "python3",-->
<!--            "python"-->
<!--        };-->

<!--        foreach (string python in pythons) {-->
<!--            if (IsPythonValid(python)) {-->
<!--                PythonPath = python;-->
<!--                CachedPythonPath = python;-->
<!--                return true;-->
<!--            }-->
<!--        }-->
<!--        -->
<!--        Log.LogError($"Couldn't not find python on the PATH. Tried: {pythons}");-->
<!--        return false;-->
<!--    }-->
<!--    -->
<!--    private bool IsPythonValid(string python)-->
<!--    {-->
<!--        bool isPythonValid = false;-->
<!--        -->
<!--        Process process = new Process();-->
<!--        process.StartInfo = new ProcessStartInfo {-->
<!--            FileName = python,-->
<!--            CreateNoWindow = true,-->
<!--            Arguments = "&#45;&#45;version",-->
<!--            RedirectStandardOutput = true-->
<!--        };-->
<!--        try {-->
<!--            process.Start();-->
<!--            try {-->
<!--                process.WaitForExit(1000 * 10);-->
<!--                string outputLine = process.StandardOutput.ReadLine() ?? "";-->
<!--                isPythonValid = outputLine.ToLowerInvariant().StartsWith("python 3");-->
<!--            } finally {-->
<!--                process.Kill();-->
<!--            }-->
<!--        } catch { }-->
<!--        return isPythonValid;-->
<!--    }        -->
<!--}-->
<!--]]>-->
<!--            </Code>-->
<!--        </Task>-->
<!--    </UsingTask>-->
    
    <ItemGroup>
        <GlslVertFile Include="**\*.vert.glsl">
            <GgenVersionFile>%(RecursiveDir)%(Filename).ggen_version</GgenVersionFile>
            <CsFile>%(RecursiveDir)$([System.IO.Path]::GetFileNameWithoutExtension('%(Filename)')).Generated.cs</CsFile>
            <LogicalDirectory>$(MSBuildProjectName).$([System.String]::new('%(RecursiveDir)').Replace('/', '.').Replace('\', '.'))</LogicalDirectory>
        </GlslVertFile>
        <GlslFragFile Include="**\*.frag.glsl">
            <GgenVersionFile>%(RecursiveDir)%(Filename).ggen_version</GgenVersionFile>
            <LogicalDirectory>$(MSBuildProjectName).$([System.String]::new('%(RecursiveDir)').Replace('/', '.').Replace('\', '.'))</LogicalDirectory>
        </GlslFragFile>
    </ItemGroup>
    
    <ItemGroup>
        <GgenScript Include="$(MSBuildThisFileDirectory)\ggen\**\*.py">
            <Link>%(RelativeDir)/%(Filename).%(Extension)</Link>
        </GgenScript>
    </ItemGroup>
    
    
    <ItemGroup>
        <!-- 
            Define as an Item outside of the Target so that IDEs can pick up on these files.
            This seemed to be an issue with Rider, not sure if it's an issue with Visual Studio or not. 
        -->
        <Compile Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(CsFile)')">
            <Link>%(CsFile)</Link>
        </Compile>
    </ItemGroup>

    
    <Target Name="ggen" AfterTargets="AfterResolveReferences" BeforeTargets="BeforeCompile;PrepareResourceNames">
        <Message Importance="high" Text="Running ggen..." />
        <FindPythonTask>
            <Output TaskParameter="PythonPath" PropertyName="Python" />
        </FindPythonTask>
        <Exec
            WorkingDirectory="$(MSBuildThisFileDirectory)"
            Command="$(Python) -m ggen &quot;$(MSBuildProjectDirectory)&quot; --ggen-script-files &quot;@(GgenScript)&quot; --files &quot;@(GlslVertFile -> '%(FullPath)');@(GlslFragFile -> '%(FullPath)')&quot; --output-dir &quot;$(MSBuildProjectDirectory)/$(IntermediateOutputPath)ggen&quot;" 
        />
        <ItemGroup>

            <Compile Remove="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(CsFile)')" />
            <Compile Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(CsFile)')">
                <Link>%(GlslVertFile.CsFile)</Link>
            </Compile>
            
            <EmbeddedResource Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(RecursiveDir)/%(Filename).spv')">
                <LogicalName>%(GlslVertFile.LogicalDirectory)%(GlslVertFile.Filename).spv</LogicalName>
            </EmbeddedResource>
            <EmbeddedResource Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(RecursiveDir)/%(Filename)_gl.glsl')">
                <LogicalName>%(GlslVertFile.LogicalDirectory)%(GlslVertFile.Filename)_gl.glsl</LogicalName>
            </EmbeddedResource>
            <EmbeddedResource Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(RecursiveDir)/%(Filename).metal')">
                <LogicalName>%(GlslVertFile.LogicalDirectory)%(GlslVertFile.Filename).metal</LogicalName>
            </EmbeddedResource>
            <EmbeddedResource Include="@(GlslFragFile -> '$(IntermediateOutputPath)ggen/%(RecursiveDir)/%(Filename).spv')">
                <LogicalName>%(GlslFragFile.LogicalDirectory)%(GlslFragFile.Filename).spv</LogicalName>
            </EmbeddedResource>
            <EmbeddedResource Include="@(GlslFragFile -> '$(IntermediateOutputPath)ggen/%(RecursiveDir)/%(Filename)_gl.glsl')">
                <LogicalName>%(GlslFragFile.LogicalDirectory)%(GlslFragFile.Filename)_gl.glsl</LogicalName>
            </EmbeddedResource>
            <EmbeddedResource Include="@(GlslFragFile -> '$(IntermediateOutputPath)ggen/%(RecursiveDir)/%(Filename).metal')">
                <LogicalName>%(GlslFragFile.LogicalDirectory)%(GlslFragFile.Filename).metal</LogicalName>
            </EmbeddedResource>
            
            <FileWrites Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(CsFile)')" />
            <FileWrites Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(RelativeDir)%(Filename).spv')" />
            <FileWrites Include="@(GlslFragFile -> '$(IntermediateOutputPath)ggen/%(RelativeDir)%(Filename).spv')" />
            <FileWrites Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(RelativeDir)%(Filename).reflection.json')" />
            <FileWrites Include="@(GlslFragFile -> '$(IntermediateOutputPath)ggen/%(RelativeDir)%(Filename).reflection.json')" />
            <FileWrites Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(RelativeDir)%(Filename)_gl.glsl')" />
            <FileWrites Include="@(GlslFragFile -> '$(IntermediateOutputPath)ggen/%(RelativeDir)%(Filename)_gl.glsl')" />
            <FileWrites Include="@(GlslVertFile -> '$(IntermediateOutputPath)ggen/%(RelativeDir)%(Filename).metal')" />
            <FileWrites Include="@(GlslFragFile -> '$(IntermediateOutputPath)ggen/%(RelativeDir)%(Filename).metal')" />
            
        </ItemGroup>
    </Target>
    
</Project>
